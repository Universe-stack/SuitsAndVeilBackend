#!/usr/bin/env node

/**
 * Module dependencies.
 */

import app from '../src/index';
import * as debug from 'debug';
import * as http from 'http';
import * as https from 'https';
import * as fs from 'fs';
import path from 'path'

const port:any = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.set('secPort', port + 443);

const server: http.Server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const options: https.ServerOptions = {
    key: fs.readFileSync(path.join(__dirname, 'private.key')),
    cert: fs.readFileSync(path.join(__dirname, 'certificate.pem'))
  };

const secureServer: https.Server = https.createServer(options, app);

secureServer.listen(app.get('secPort'), () => {
  console.log('Secure server listening on port', app.get('secPort'));
});

secureServer.on('error', onError);
secureServer.on('listening', onListening);

function normalizePort(val: string | number): number | string | boolean {
  const port: number = parseInt(val.toString(), 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error: NodeJS.ErrnoException): void {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind: string = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening(): void {
  const addr = server.address();
  const bind: string = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr!.port;
  debug('Listening on ' + bind);
}
